package users

import (
   "database/sql"
   "github.com/myk4040okothogodo/Microservices4Jumia/ServiceB_Jumia/internal/pkg/db/migrations/mysql"
   "golang.org/x/crypto/bcrypt"
   "log"
)


type User struct {
  ID  string      `json:"id"`
  Username string    `json:"email"`
  Password string `json:"password"`
}



func (user *User) Create() {
   statement, err := database.Db.Prepare("INSERT INTO Users(Username,Password) VALUES (?, ?)")
   print(statement)
   if err != nil {
       log.Fatal(err)
   }

   hashedPassword, err := HashPassword(user.Password)
   _, err = statement.Exec(user.Email, hashedPassword)
   if err != nil {
       log.Fatal(err)
   }
}

func GetUserIdByUsername(email string)(int, error) {
   statement, err := database.Db.Prepare("select ID from Users WHERE Email = ?")
   if err != nil {
       log.Fatal(err)
   }
   row := statement.QueryRow(email)

   var Id int
   err = row.Scan(&Id)
   if err != nil {
       if err != sql.ErrNoRows {
           log.Print(err)
       }
       return 0, err
   }
   return Id, nil
}

func GetEmailById(userId string)(User, error){
    statement, err := database.Db.Prepare("select Email from Users WHERE ID = ?")
    if err != nil {
        log.Fatal(err)
    }
    row := statement.QueryRow(userId)

    var email string
    err = row.Scan(&email)
    if err !=  nil {
        if err != sql.ErrNoRows{
            log.Print(err)
        }
        return User{}, err
    }
    return User{ID: userId, Email: email}, nil
}


// Hashes given password
func HashPassword (password string)(string, error){
    bytes, err := bcrypt.GenerateFromPassword([]byte(password), 14)
    return string(bytes), err
}

//CheckPassword hash compared raw password with  it's hashed values
func CheckPasswordHash(password, hash string) bool {
    err := bcrypt.CompareHashAndPassword([]byte(hash), []byte(password))
    return err == nil
}
